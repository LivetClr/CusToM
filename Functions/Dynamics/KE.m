function []=KE(AnalysisParameters)
% Computation of the kinetic energy
%   Computation of total kinetic energy
%
%	Based on:
%	- Featherstone, R., 2014. Rigid body dynamics algorithms. Springer.
%
%   INPUT
%   - AnalysisParameters: parameters of the musculoskeletal analysis,
%   automatically generated by the graphic interface 'Analysis'.
%   OUTPUT
%   Results are automatically saved on the folder associated to each motion
%   capture in variable 'KE'
%________________________________________________________
%
% Licence
% Toolbox distributed under GPL 3.0 Licence
%________________________________________________________
%
% Authors : Antoine Muller, Charles Pontonnier, Pierre Puchaud and
% Georges Dumont
%________________________________________________________

for num_fil = 1:numel(AnalysisParameters.filename)
    filename = AnalysisParameters.filename{num_fil}(1:end-(numel(AnalysisParameters.General.Extension)-1));

    disp(['Kinetic Energy (' filename ') ...'])

    %% Chargement des variables
    load('BiomechanicalModel.mat'); %#ok<LOAD>
    Human_model = BiomechanicalModel.OsteoArticularModel;
    load([filename '/ExperimentalData.mat']); %#ok<LOAD>
    time = ExperimentalData.Time;
    load([filename '/InverseKinematicsResults.mat']); %#ok<LOAD>
    q = InverseKinematicsResults.JointCoordinates';
    if isfield(InverseKinematicsResults,'FreeJointCoordinates')
        q6dof = InverseKinematicsResults.FreeJointCoordinates';
    else
        PelvisPosition = InverseKinematicsResults.PelvisPosition;
        PelvisOrientation = InverseKinematicsResults.PelvisOrientation;
    end
   
    freq=1/time(2);

    %% Gravit� (Gravity)
    g=[0 0 -9.81]';

    %% get rid of the 6DOF joint
    if isfield(InverseKinematicsResults,'FreeJointCoordinates')
        Human_model(Human_model(end).child).mother = 0;
        Human_model=Human_model(1:(numel(Human_model)-6));
    end

    %% articular speed and acceleration
    
    dt=1/freq;
    dq=derivee2(dt,q);  % vitesses
    ddq=derivee2(dt,dq);  % acc�l�rations
    
    nbframe=size(q,1);

    %% D�finition des donn�es cin�matiques du pelvis
    % (position / vitesse / acc�l�ration / orientation / vitesse angulaire / acc�l�ration angulaire)
    % Kinematical data for Pelvis (Position/speed/acceleration/angles/angular speed/angular acceleration)

    if isfield(InverseKinematicsResults,'FreeJointCoordinates')
        p_pelvis=q6dof(:,1:3);  % frame i : p_pelvis(i,:)
        r_pelvis=cell(size(q6dof,1),1);
        for i=1:size(q6dof,1)
            r_pelvis{i}=Rodrigues([1 0 0]',q6dof(i,4))*Rodrigues([0 1 0]',q6dof(i,5))*Rodrigues([0 0 1]',q6dof(i,6)); % matrice de rotation en fonction des rotations successives (x,y,z) : frame i : r_pelvis{i}
        end
    else
        p_pelvis = cell2mat(PelvisPosition)';
        r_pelvis  = PelvisOrientation';
    end
    
    %dR
    dR=zeros(3,3,nbframe);
    for ligne=1:3
        for colonne=1:3
            dR(ligne,colonne,:)=derivee2(dt,cell2mat(cellfun(@(b) b(ligne,colonne),r_pelvis,'UniformOutput',false)));
        end
    end
    w=zeros(nbframe,3);
    for i=1:nbframe
       wmat=dR(:,:,i)*r_pelvis{i}';
       w(i,:)=[wmat(3,2),wmat(1,3),wmat(2,1)];
    end

    % v0
    v=derivee2(dt,p_pelvis);
    vw=zeros(nbframe,3);
    for i=1:nbframe
        vw(i,:)=cross(p_pelvis(i,:),w(i,:));
    end
    v0=v+vw;
  
    %% Inverse dynamics
    KE=zeros(1,nbframe);
    h = waitbar(0,['Kinetic Energy (' filename ')']);

    for i=1:nbframe
KEt=0;
        % setting position/speed/KE for each joint
        Human_model(1).p=p_pelvis(i,:)';
        Human_model(1).R=r_pelvis{i};
        Human_model(1).v0=v0(i,:)';
        Human_model(1).w=w(i,:)';
        c=Human_model(1).R*Human_model(1).c+Human_model(1).p;
     I=Human_model(1).R*Human_model(1).I*Human_model(1).R'; % tenseur d'inertie exprimé au centre de masse
    vc=(Human_model(1).v0+cross(Human_model(1).w,c));
    Human_model(1).KE=0.5*Human_model(1).m*(vc'*vc)...
                    +0.5*Human_model(1).w'*(I*Human_model(1).w); % quantité de mouvement 
        for j=2:numel(Human_model)
            Human_model(j).q=q(i,j); %#ok<*SAGROW>
            Human_model(j).dq=dq(i,j);
            Human_model(j).ddq=ddq(i,j);
        end
        Human_model = ForwardAllKinematicsKE(Human_model,1);
        
                for j=1:numel(Human_model)
                KEt=KEt+Human_model(j).KE;
                end
        KE(i)=KEt;
        waitbar(i/nbframe)
    end
    close(h)
   
    save([filename '/KE'],'KE');
%     
    disp(['... Kinetic Energy (' filename ') done'])
    
end

end

